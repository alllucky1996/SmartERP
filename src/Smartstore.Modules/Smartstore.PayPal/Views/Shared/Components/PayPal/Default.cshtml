@model PublicPaymentMethodModel

<!-- Set up a container element for the paypal button -->
<div id="paypal-button-container" 
     data-init-transaction-url="@Url.Action("InitTransaction", "PayPal")"
     data-forward-url="@(Model.IsPaymentSelection ? Url.Action("Confirm", "Checkout") : Url.Action("BillingAddress", "Checkout"))"
     attr-style='(Model.IsPaymentSelection, "display:none")'></div>

@*INFO: No target zone here as can also be rendered via AJAX*@
<script data-origin="paypal-button">
    loadPayPalPayScript(function () {
        var btnContainer = $("#paypal-button-container");

        // Render the PayPal button into #paypal-button-container
        paypal.Buttons({
            style: {
                layout: 'horizontal',
                label: 'pay',
                shape: '@Model.ButtonShape',
                color: '@Model.ButtonColor'
            },
            // Create order
            createOrder: function (data, actions) {
                return actions.order.create({
                    purchase_units: [{
                        amount: {
                            value: '@(Model.Amount.ToString("F2", CultureInfo.InvariantCulture))'
                        }
                    }],
                    intent: "@Model.Intent"
                });
            },
            // Save obtained order id in checkout state.
            onApprove: function (data, actions) {
                $.ajax({
                    type: 'POST',
                    url: btnContainer.data("init-transaction-url"),
                    data: { orderId: data.orderID },
                    cache: false,
                    success: function (resp) {
                        if (resp.success) {
                            // Lead customer to address selection or to confirm page if PayPal was choosen from payment selection page.
                            location.href = btnContainer.data("forward-url");
                        }
                        else {
                            displayNotification(resp.message, 'error');
                        }
                    }
                });
            },
            onCancel: function (data) {
                // Do nothing here, just let the user have it's way
            },
            onError: function (err) {
                displayNotification(err, 'error');
            }
        }).render('#paypal-button-container');

        @if (Model.IsPaymentSelection)
        {
            <text>
            var btnNext = $(".payment-method-next-step-button");

            // Listen for changes to the radio fields
            $(document, "input[name='paymentmethod']").on("change", function(e) {
                if (e.target.value == "Payments.PayPalStandard")
                {
                    btnNext[0].style.display = 'none';
                    btnContainer[0].style.display = 'block';
                }
                else
                {
                    btnNext[0].style.display = 'block';
                    btnContainer[0].style.display = 'none';
                }
            });
            </text>
        }
    });

    function loadPayPalPayScript(callback) {
        var elem = document.createElement('script');
        elem.type = 'text/javascript';
        elem.async = true;
        elem.src = "@Html.Raw(Model.ScriptUrl)";
        elem.addEventListener('load', callback, false);

        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(elem, s);
    }
</script>