@using Newtonsoft.Json.Linq;

@model IRuleExpression

@{
    var id = "rule-value-" + Model.Id;
    string fromStr = T("Common.From");
    string toStr = T("Common.To");
    string productId = null;
    string minQuantity = null;
    string maxQuantity = null;
    RuleValueSelectListOption selectedProduct = null;

    try
    {
        if (Model.RawValue.HasValue())
        {
            dynamic json = JObject.Parse(Model.RawValue);
            productId = (string)json.ProductId;
            minQuantity = (string)json.MinQuantity;
            maxQuantity = (string)json.MaxQuantity;
        }
    }
    catch
    {
    }

    var remoteUrl = Url.Action("RuleOptions", "Rule", new
    {
        reason = RuleOptionsRequestReason.SelectListOptions,
        ruleId = Model.Id,
        rootRuleSetId = (int)ViewBag.RootRuleSetId,
        descriptorMetadataKey = "ProductRuleDescriptor",
        rawValue = productId
    });

    if (productId.HasValue() &&
        Model.Descriptor.Metadata.TryGetValue("ProductRuleDescriptor", out var descriptorObj) && 
        descriptorObj is RuleDescriptor productRuleDescriptor &&
        productRuleDescriptor.SelectList is RemoteRuleValueSelectList list)
    {
        var ruleOptionsProviders = Resolve<IEnumerable<IRuleOptionsProvider>>();
        var productOptionsProvider = ruleOptionsProviders.FirstOrDefault(x => x.Matches(list.DataSource));
        if (productOptionsProvider != null)
        {
            var productOptions = await productOptionsProvider.GetOptionsAsync(new RuleOptionsContext(RuleOptionsRequestReason.SelectedDisplayNames, productRuleDescriptor)
            {
                Value = productId,
                PageSize = int.MaxValue,
                Language = WorkContext.WorkingLanguage
            });
            selectedProduct = productOptions.Options.FirstOrDefault(x => x.Value.EqualsNoCase(productId));
        }
    }
}

<select id="@(id)-ProductId" name="@(id)-ProductId" data-placeholder="@T("Common.Unspecified")" data-remote-url="@remoteUrl">
    @if (selectedProduct != null)
    {
        <option value="@selectedProduct.Value" selected="selected" attr-data-hint='(selectedProduct.Hint?.HasValue() ?? false, selectedProduct.Hint)'>
        @(selectedProduct.Text.NullEmpty() ?? selectedProduct.Value)</option>
    }
</select>

@*INFO: onRuleValueChanged (enables save button) called by handler in smartstore.rules.js.*@
<div class="numberinput-group flex-grow-1 ml-2" style="max-width: 140px;">
    <input type="number"
           id="@(id)-MinQuantity" 
           name="@(id)-MinQuantity"
           attr-value='(minQuantity.HasValue(), minQuantity)'
           title="@fromStr"
           placeholder="@fromStr"
           min="0"
           step="1"
           class="form-control" />
</div>
<div class="numberinput-group flex-grow-1 ml-2 mr-2" style="max-width: 140px;">
    <input type="number"
           id="@(id)-MaxQuantity" 
           name="@(id)-MaxQuantity"
           attr-value='(maxQuantity.HasValue(), maxQuantity)'
           title="@toStr"
           placeholder="@toStr"
           min="0"
           step="1"
           class="form-control" />
</div>