@model BlogPostListModel

@if (Model.BlogPosts.Count == 0)
{
    return;
}

@foreach (var item in Model.BlogPosts)
{
    var hasImage = item.Preview != null;
    var imageUrl = hasImage ? item.Preview.File?.GetUrl() : string.Empty;
    var hasBgImage = item.HasBgImage && hasImage;

    var cssClass = (new[] { "bloglist-item-root", "card", "rounded", "shadow-sm", "border-0", "mb-3 mb-md-2" }).ToList();
    if (hasBgImage)
    {
        cssClass.Add("bg-tint-3 has-image-bg");
    }
    if (item.SectionBg.HasValue())
    {
        cssClass.Add("has-section-bg section-" + item.SectionBg + " shadow-" + item.SectionBg);
    }
    if (item.Tags.Count > 0 && item.DisplayTagsInPreview)
    {
        cssClass.Add("has-tags");
    }
    if (hasImage)
    {
        cssClass.Add("has-image");
    }
    if (!item.IsPublished)
    {
        cssClass.Add("unpublished");
    }

    <article class="@string.Join(" ", cssClass)" itemscope itemtype="http://schema.org/BlogPosting">
        <div class="bloglist-item d-flex flex-row flex-nowrap d-md-block">
            @if (hasBgImage)
            {
                await RenderTags(item, false);
                await RenderComments(item);

                <div class="card-img h-100">
                    <img class="card-img h-100 box-scale" src="@imageUrl" alt="@item.Preview.Alt" title="@item.Preview.Title" itemprop="image">
                </div>
                <div class="bg-overlay bg-@(item.SectionBg)"></div>
                <div class="bg-overlay gradient-black scrim-linear-gradient bg-shade-@(item.SectionBg)" style="--cendpos: 50%"></div>
            }
            else if (!item.SectionBg.HasValue() && hasImage)
            {
                <div class="bloglist-item-header">
                    <a class="d-block h-100" asp-route="BlogPost" asp-route-SeName="@item.SeName">
                        <img class="bloglist-item-img box-scale" src="@imageUrl" alt="@item.Preview.Alt" title="@item.Preview.Title" itemprop="image">
                    </a>

                    @{
                        await RenderTags(item, true);
                        await RenderComments(item);
                    }
                </div>
            }
            else
            {
                await RenderTags(item, true);
                await RenderComments(item);
            }

            <div class="@(hasBgImage ? " card-img-overlay d-flex flex-column justify-content-end p-0" : "bloglist-item-body" )">
                <div class="blogpost-text text-left w-100 p-4">
                    <div class="blogpost-date rfs mb-2 text-muted">
                        @item.CreatedOn.ToNativeString("dd MMMM, yyyy")
                    </div>
                    <meta itemprop="datePublished" content="@item.CreatedOn.ToString("u")" />
                    <meta itemprop="author" content="@Model.StoreName" />
                    <meta itemprop="publisher" content="@Model.StoreName" />

                    <h3 class="fs-h6 mb-3 mt-1 font-weight-medium">
                        <a asp-route="BlogPost" asp-route-SeName="@item.SeName" class="blogpost-title">
                            @item.Title
                        </a>
                        <meta itemprop="headline" content="@item.Title" />
                    </h3>

                    <div sm-if="item.Intro.HasValue()" class="py-1 blogpost-intro rfs" itemprop="description">@Html.Raw(item.Intro)</div>

                    <zone name="bloglist_page_inside_post" />
                </div>
            </div>
        </div>
    </article>
}

@{
    async Task RenderTags(PublicBlogPostModel item, bool hasBgImage)
    {
        if (item.Tags.Count() > 0 && item.DisplayTagsInPreview)
        {
            <div class="blogpost-tags-overlay d-none d-md-block @(hasBgImage ? "p-2" : "p-4")">
                @for (int i = 0, length = item.Tags.Count(); i < length; i++)
                {
                    var tag = item.Tags[i];
                    var tagClasses = $"blogpost-tag badge p-1 {(item.SectionBg.HasValue() && item.SectionBg.Equals("primary") && !item.HasBgImage ? "badge-secondary" : "badge-primary")}";

                    <a class="@tagClasses" asp-route="BlogByTag" asp-route-tag="@tag.SeName">@tag.Name</a>
                }
            </div>
        }
    }

    async Task RenderComments(PublicBlogPostModel item)
    {
        <div sm-if="item.Comments.AllowComments && !Model.DisableCommentCount" class="comments-overlay">
            <a class="fs-xs m-2 btn btn-secondary btn-circle"
               attr-class='(item.Comments.NumberOfComments > 0, "vivid")'
               asp-route="BlogPost" asp-route-SeName="@item.SeName" asp-fragment="customer-comment-list"
               title="@T("Blog.CommentsLink", item.Comments.NumberOfComments)">
                <span class="blogpost-comments-icon fa fa-comment-alt pr-1"></span>
                <span class="blogpost-comments-count">@item.Comments.NumberOfComments</span>
            </a>
        </div>
    }
}