@addTagHelper Smartstore.Web.TagHelpers.Public.*, Smartstore.Web.Common

@using Microsoft.AspNetCore.Http.Extensions

@model PublicBlogPostModel

@{
    Layout = "_Layout";

    Assets.AppendTitleParts(Model.MetaTitle.HasValue() ? Model.MetaTitle : Model.Title);
    Assets.AppendMetaDescriptionParts(Model.MetaDescription);
    Assets.AppendMetaKeywordsParts(Model.MetaKeywords);

    if (ViewBag.CanonicalUrlsEnabled)
    {
        var blogPostUrl = Url.RouteUrl("BlogPost", new { SeName = Model.SeName }, this.Request.Scheme);
        Assets.AppendCanonicalUrlParts(blogPostUrl);
    }
}

<widget target-zone="right">
    @await Component.InvokeAsync("MonthNavigation")
    <zone name="blog_right_months_after" />
    @await Component.InvokeAsync("TagNavigation")
    <zone name="blog_right_bottom" />
</widget>

<partial name="MetaProperties" model="Model.MetaProperties" />

<article class="page blogpost-page" itemprop="mainEntity" itemscope itemtype="http://schema.org/BlogPosting">

    @if (Model.DisplayAdminLink)
    {
        <a class="btn btn-secondary btn-flat btn-admin-edit" asp-action="Edit" asp-controller="Blog" asp-area="Admin" asp-route-id="@Model.Id" target="admin-blogpost" rel="nofollow">
            <i class="fa fa-cog"></i>
            <span>@T("Common.Cms.EditBlogpost")</span>
        </a>
    }

    <div sm-if="Model.Image != null" class="shadow-sm-primary mb-3">
        <figure class="single-media-item-image">
            <img sm-model="Model.Image" />
        </figure>
    </div>

    <div class="blogpost-date text-muted">
        @Model.CreatedOn.ToNativeString("D")
    </div>
    <meta itemprop="datePublished" content="@Model.CreatedOnUTC.ToString("u"))" />
    <meta itemprop="author" content="@ViewBag.StoreName" />
    <meta itemprop="publisher" content="@ViewBag.StoreName" />
    <meta itemprop="url" content="@Request.GetDisplayUrl()" />

    <div class="page-title mb-4 mt-3">
        <h1 class="fs-h2" itemprop="headline">@Model.Title</h1>
    </div>

    <div class="blogpost-body">
        <zone name="blogpost_page_before_body" />

        <div class="blogpost-content long-text html-editor-content" itemprop="articleBody">
            @Html.Raw(Model.Body)
        </div>

        @if (Model.Tags.Count > 0)
        {
            var keywords = string.Empty;
            <div class="blogpost-tags mt-4">
                @foreach (var tag in Model.Tags)
                {
                    <a class="blogpost-tag badge badge-pill badge-info py-2 px-3 mb-1" asp-route="BlogByTag" asp-route-tag="@tag.SeName">@tag.Name</a>
                    keywords = keywords.Length > 0 ? keywords + ", " + tag.Name : keywords + tag.Name;
                }
            </div>
            <meta itemprop="articleSection" content="@keywords" />
            <meta itemprop="keywords" content="@keywords" />
        }

        <zone name="blogpost_page_before_comments" />

        <div sm-if="Model.Comments.AllowComments" class="row">
            <div class="col-12">
                <div class="block blog-comment-form mt-5">
                    <form asp-action="BlogCommentAdd">
                        <input type="hidden" asp-for="@Model.Id" />
                        <fieldset class="blog-comment-form content-group mt-5">
                            <legend><span>@T("Blog.Comments.LeaveYourComment")</span></legend>

                            @if (ViewContext.ViewData.ModelState.ContainsKey(""))
                            {
                                <div asp-validation-summary="All"></div>
                            }

                            <honeypot sm-enabled="true" />

                            <div class="form-group">
                                <textarea asp-for="AddNewComment.CommentText" class="form-control-lg" placeholder="@Html.DisplayNameFor(m => m.AddNewComment.CommentText)" rows="6"></textarea>
                                <span asp-validation-for="AddNewComment.CommentText"></span>
                            </div>

                            <zone name="gdpr_consent" />

                            <captcha sm-enabled="Model.AddNewComment.DisplayCaptcha" class="form-group" />

                            <div class="form-group">
                                <button type="submit" name="add-comment" value="add-comment" class="btn btn-primary btn-lg">
                                    @T("Blog.Comments.SubmitButton")
                                </button>
                            </div>
                        </fieldset>
                    </form>
                </div>

                <partial name="Comment.List" model="Model.Comments" />
            </div>
        </div>

        <zone name="blogpost_page_after_comments" />
    </div>
</article>